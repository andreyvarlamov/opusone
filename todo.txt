TODO:
- More rendering
    - Debug rendering:
        - More bounding shapes: spheres, capsules, wireframe triangles;
        - Make render state management more efficient
    - Consider switching to only one render unit marker type per render unit
    - Some kind of screen-space visualization tools. for example plots
    - Instancing
    
- Improving animation
    - Animation blending
    - Animation states
    - Numerical robustness - eliminate jitter (investigate, might not be such a big problem now)

- Study
    - Look into problems with interpolating matrices more -- is it just lerp vs slerp type of thing, or there's more to it?
        - Is just normlalizing the vector after being multiplied with an interpolated matrix. And is that nlerp?
        - Vertex -> fragment shader linearly interpolates between vertices (and normalized?).
    - Review tangent space again

- Shader/gl infrastructure
    - Hot-reloading
    - A build utility
    - Use uniform buffers
    - Keep track of gl state in software, so don't do redundant gl calls
    - Uniform structs
    - Shader modularity. Includes. How to do common uniforms better.

- DCC/Export/Import
    - Optimize material export in gltf
    - Determine the best export setup (ease of use in dcc + performance)
    - Consider creating a custom Blender exporter
    - Handling edge cases/not quite correct export setup better when importing
    - Should be notified when something is not loaded properly.
        - For example when model is expected to have specular map, but for some reason doesn't





- Scratch:
    - Ground search. How to determine if the player is on the ground
    - Casting a ray against polyhedron
    - Camera dolly-sliding if not enough room
    - OBB vs OBB collisions. OBB for characters and monsters.
    - Step over small obstacles
    - More proper jump. Tweak params.
    - Clean up collision geometry structs and lack thereof. Pull collision logic into a different function 
    - Limits to sliding/climbing angles
    - Debug draw header
    - Render unit cleanup
        - All render units in a linked list
        - Fix render marker types being individual tagged unions, they should be per render unit
        - Fixed sized render units.
        - Reference using pointers, not indices (materials, render units, instances, blueprints)
    - Collision polyhedron imported in one model from DCC
    - A more complex interior scene with more complicated geometry, separate collision geometry. More realistic level collision cases.
    - Basic follower AI
    - First pass on an "animation controller"
    - Combat. Simple attack and damage box vs box.
    - Skeletal hitboxes. And more complex sword collisions.
    - Basic combat AI
    - Player vs enemy combat scene.
    - Exterior scene.
    - Concept of a scene. Different types of lights. Multiple lights.

    - Render unit <-> entity relation cleanup -- hashtable?
    - Intrinsics for math functions
    - SIMD
    - Mouse picking using the depth buffer and a framebuffer saving which model is displayed in that fragment
    - Optimized linmath functions: RotateVectorByQuat; FullTransform stuff
    - Investigate weird stuttering when rotating camera (I think it's only with keyboard).
    - Post-processing
    - Import materials as part of the importing code.
    - Collision info from DCC, through GLTF and Assimp. Analytical collision geometry.
    - DLL Hot-reloading
    - Draw text in the world space (e.g. instance ids above instances)
    - I don't think I need normals or alpha in debug draw vertex spec
    - When to do mipmapping, when not to do mipmapping. Is that the right way to handle more distant objects? S and T axes
    - Handle a skinned model in a rest pose better
    - More efficient normal transform matrix calculation (calculate for each bone in software and send in uniform).
    - Normal mapping is not implemented in the shader.
    - Do light calculations in view space.
    - Materials. How much specular there is basically. Make it work together with specular mapping
    - Shadows. Implies multi-pass rendering
    - glUniformxx accepts count - can modify the whole array. Do that for bone transforms of skinned meshes
    - More flexible shader parameters:
        - Shade texture when there are vertex colors
        - Ignore vertex color when not desired
        - Ignore texture when not desired
        - Ignore normal map when none.
        - What to do as shader attribute vs what to do as uniform vs what to calculate in shader (e.g. Bitangent).
